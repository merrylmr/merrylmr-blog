(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{317:function(e,n,s){"use strict";s.r(n);var t=s(14),a=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"axios源码分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#axios源码分析"}},[e._v("#")]),e._v(" axios源码分析")]),e._v(" "),n("p",[e._v("axios既支持浏览器，也可以在node项目中使用")]),e._v(" "),n("ul",[n("li",[e._v("从浏览器中创建 "),n("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"}},[e._v("XMLHttpRequests"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("从 node.js 创建 "),n("a",{attrs:{href:"http://nodejs.org/api/http.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("http"),n("OutboundLink")],1),e._v(" 请求")])]),e._v(" "),n("h2",{attrs:{id:"目录结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[e._v("#")]),e._v(" 目录结构")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("|--dist \n|--lib\n| |-- adapters\n| | |-- http.js\n| | |-- xhr.js\n| |-- cancel\n| | |-- cancel.js\n| | |-- cancelToken.js\n| | |-- isCancel.js\n| |-- core\n| | |-- Axios.js\n| | |-- createError.js\n| | |-- dispatchRequest.js\n| | |-- enhanceError.js\n| | |-- interceptorManager.js\n| | |-- settle.js  // response处理\n| | |-- transformData.js // transformRequest/transformResponse的处理\n| |-- helpers\n| | |-- bind.js \n| | |-- buildURL.js  // params参数的处理\n| | |-- combineRULs.js\n| | |-- cookies.js\n| | |-- deprecatedMethod.js\n| | |-- isAbsoluteURL.js\n| | |-- isURLSameOrigin.js\n| | |-- normailizeHeaderName.js\n| | |-- parseHeaders.js\n| | |-- spread.js\n| |-- axios.js\n|-- default.js\n|-- utils.js\n|-- index.js\n|-- index.d.ts\n")])])]),n("h2",{attrs:{id:"源码分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#源码分析"}},[e._v("#")]),e._v(" 源码分析")]),e._v(" "),n("ul",[n("li",[e._v("url地址拼接处理："),n("code",[e._v("helpers/buildURL.js")])]),e._v(" "),n("li",[e._v("头部处理\n配置会以一个优先顺序进行合并。这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者")])]),e._v(" "),n("p",[e._v("index.js--\x3e axios.js --\x3e Axios.js")]),e._v(" "),n("p",[e._v("// axios.js(入口文件)\n//->Axios.js(defaults.js)\n//->dispatchRequest.js(chain[]，interceptors.request放在组件面)\n//->")]),e._v(" "),n("h2",{attrs:{id:"核心代码-axios-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#核心代码-axios-js"}},[e._v("#")]),e._v(" 核心代码（Axios.js）")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Axios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n")])])]),n("p",[e._v("dispatchRequest.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("module.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n // 执行ajax请求\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n")])])]),n("h2",{attrs:{id:"ajax"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[e._v("#")]),e._v(" AJAX")]),e._v(" "),n("p",[e._v("header的Content-Type(setRequestHeader)")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("application/x-www-form-urlencoded format")])]),e._v(" "),n("li",[n("p",[e._v("application/json")])]),e._v(" "),n("li",[n("p",[e._v("URLSearchParams\nhttps://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams")])]),e._v(" "),n("li",[n("p",[e._v("Accept")])])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 默认：\n// 设置不同方法请求的内容类型\n// 在default.js里面会对Data的类型进行判断，设置相应的Content-type\n// xhr.js->adapter->put、post等：如果isFormData 会删除 Content-type,Let the browser set it\n// dispatchRequest里面会在post里面的方法，拍平到headers下面，然后删除对用的方法下的头部设置项\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'\naxios.defaults.headers.get['x-x'] = 'get-only'\naxios.defaults.headers.put['x-x-x'] = 'put-only'\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// request配置\naxios.interceptors.request.use((config) => {\n  // get请求：发送的数据data=\"undefined\",header数据的content-type会被删除，\n  // 如果是post、put请求：以下设置则会生效。\n  // content-type设置发送请求的数据类型，不设置default.js会对发送的data类型进行判断，然后添加对应的类型\n  // 这个应该是在default.js执行之后，在执行\n  config.headers['content-type'] = 'application/json';\n  return config;\n});\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);